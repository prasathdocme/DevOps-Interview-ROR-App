AWSTemplateFormatVersion: "2010-09-09"
Description: Deploy Rails + Nginx on ECS with RDS & S3

Resources:

  ### VPC & Networking ###
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: ap-south-1a
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: ap-south-1b
      MapPublicIpOnLaunch: true

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: ap-south-1a
      MapPublicIpOnLaunch: false

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: ap-south-1b
      MapPublicIpOnLaunch: false

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  ### Security Groups ###
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP access
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access from ALB
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref ALBSecurityGroup

  RDSInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow PostgreSQL access from ECS
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ECSSecurityGroup

  ### S3 Bucket ###
  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "rails-app-bucknew${AWS::AccountId}"

  ### IAM Role for ECS Execution ###
  ECSIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  ### ECS Cluster ###
  MyECSCluster:
    Type: AWS::ECS::Cluster

  ### RDS Database (PostgreSQL) ###
  MyRDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: rails-db
      Engine: postgres
      MasterUsername: rails
      MasterUserPassword: "Password123"
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      VPCSecurityGroups:
        - !Ref RDSInstanceSecurityGroup
      DBSubnetGroupName: !Ref MyDBSubnetGroup
      PubliclyAccessible: false
      MultiAZ: false

  MyDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnets for RDS"
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  ### ECS Task Definition ###
  MyTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - FARGATE
      Cpu: "1024"
      Memory: "2048"
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref ECSIAMRole
      ContainerDefinitions:
        - Name: rails_app
          Image: 573770898769.dkr.ecr.ap-south-1.amazonaws.com/rails_app:latest
          Essential: true
          PortMappings:
            - ContainerPort: 3000
          Environment:
            - Name: RDS_DB_NAME
              Value: "rails-db"
            - Name: RDS_USERNAME
              Value: "rails"
            - Name: RDS_PASSWORD
              Value: "Password123"
            - Name: RDS_HOSTNAME
              Value: !GetAtt MyRDSInstance.Endpoint.Address
            - Name: RDS_PORT
              Value: "5432"
        - Name: webserver
          Image: 573770898769.dkr.ecr.ap-south-1.amazonaws.com/webserver:v11
          Essential: true
          PortMappings:
            - ContainerPort: 80

  ### ECS Service ###
  MyECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref MyECSCluster
      TaskDefinition: !Ref MyTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 2
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroups:
            - !Ref ECSSecurityGroup
          AssignPublicIp: DISABLED  # Do not assign public IP to ECS tasks
      LoadBalancers:
        - ContainerName: webserver
          ContainerPort: 80
          TargetGroupArn: !Ref MyTargetGroup

  ### Application Load Balancer ###
  MyALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Scheme: internet-facing

  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref MyVPC
      Protocol: HTTP
      Port: 80
      TargetType: ip

  MyALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref MyALB
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup

Outputs:
  LoadBalancerDNS:
    Description: ALB URL
    Value: !GetAtt MyALB.DNSName
